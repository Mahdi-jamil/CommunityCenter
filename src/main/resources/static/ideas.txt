Community:
    public - private - restricted types of community
    +18 or not (boolean)
    welcome message(boolean with if true add one)
    Rules
    Get Popular communities
        https://www.reddit.com/r/lebanonmemes/comments/m0c8qa/discord_server_welcoming_members/?sort=top
            sort=top, old, new, Sort by Best:
                            Sorting by best involves a more nuanced algorithm that considers factors beyond just the number of upvotes or engagement.
                            In addition to considering the quantity of votes, it might also take into account factors such as the ratio of upvotes to downvotes or the recency of the votes.
                            The goal of sorting by best is to surface content that not only has a high number of votes but also maintains a high level of approval relative to the engagement it receives.
                            This sorting method aims to highlight content that is both popular and consistently well-received by the community, potentially offering a more balanced representation of quality content.


User:
    add follow feature
    private chat

Posts:
    can upload img

Features:
    1-Add community room for live chatting
    2-Add Oauth2
        spring.security.oauth2.client.registration.google.client-id=822622505923-5bd6li4evqmc697ge9cekkuqmrag16s0.apps.googleusercontent.com
        spring.security.oauth2.client.registration.google.client-secret=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
        spring.security.oauth2.client.registration.google.scope=openid,profile,email

        spring.security.oauth2.client.registration.github.client-id=Iv1.2fb13246f424dcf1
        spring.security.oauth2.client.registration.github.client-secret=cedc0f3cbe9c1c3cddf3c738d73cfb30f6e54517



Postgres :
    Trigger
        1-Create a trigger function to update the number_of_members column:

           CREATE OR REPLACE FUNCTION update_community_members()
           RETURNS TRIGGER AS $$
           BEGIN
               IF TG_OP = 'INSERT' THEN
                   UPDATE community
                   SET number_of_members = number_of_members + 1
                   WHERE community_id = NEW.community_id;
               ELSIF TG_OP = 'DELETE' THEN
                   UPDATE community
                   SET number_of_members = number_of_members - 1
                   WHERE community_id = OLD.community_id;
               END IF;
               RETURN NULL;
           END;
           $$ LANGUAGE plpgsql;

           Create a trigger for the user_community table:

           CREATE TRIGGER update_community_members_trigger
           AFTER INSERT OR DELETE ON user_community
           FOR EACH ROW
           EXECUTE FUNCTION update_community_members();
